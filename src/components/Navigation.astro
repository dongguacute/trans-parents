---
// Navigation component
import { getSortedPosts } from '../utils/posts';
import articlesData from '../data/articles.json';

// 在导航组件中加载所有文章数据，使搜索在所有页面都可用
const allPosts = await getSortedPosts();

// 构建搜索数据
const searchData = articlesData.articles
  .map(article => {
    const post = allPosts.find(p => p.slug === article.slug);
    if (!post) return null;
    
    return {
      id: article.id,
      slug: article.slug,
      title: post.data.title,
      description: post.data.description || '',
      group: article.group,
      groupName: (articlesData.groups as any)[article.group]?.name || '',
      groupColor: (articlesData.groups as any)[article.group]?.color || '',
      category: post.data.category || '',
      tags: post.data.tags || [],
      link: `/posts/${article.slug}`
    };
  })
  .filter(item => item !== null);
---

<div id="navigation" class="fixed top-0 left-0 right-0 z-50 flex items-center p-5 pointer-events-none">
   <!-- Left side: Smiling face circle button -->
   <button id="nav-toggle" class="nav-button pointer-events-auto rounded-full w-12 h-12 flex items-center justify-center cursor-pointer backdrop-blur-md" style="z-index: 60;">
     <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
       <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
       <circle cx="9" cy="9" r="1" fill="currentColor"/>
       <circle cx="15" cy="9" r="1" fill="currentColor"/>
       <path d="M8 14 Q12 18 16 14" stroke="currentColor" stroke-width="2" fill="none"/>
     </svg>
   </button>

   <!-- Center: Search box -->
   <div class="flex-1 flex justify-center pointer-events-auto" style="z-index: 30;">
     <div class="relative desktop-search">
       <input type="text" id="search-input" placeholder="搜索..." class="search-input pl-10 pr-4 py-2 rounded-full backdrop-blur-md border transition-all duration-300" style="width: 250px; outline: none;">
       <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 search-icon" style="color: var(--color-text);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
       </svg>
       <!-- Desktop search dropdown results -->
       <div id="desktop-search-results" class="desktop-search-dropdown hidden">
         <div class="search-results-content">
           <!-- Results will be inserted here -->
         </div>
       </div>
     </div>
   </div>

   <!-- Mobile Search Modal -->
   <div id="mobile-search-modal" class="mobile-search-modal fixed inset-0 z-50 hidden flex items-start justify-center pt-20 pb-4 px-4" onclick="event.target === this && this.classList.remove('show')">
     <div class="relative w-full max-w-md bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden" style="background-color: var(--color-card); border: 1px solid var(--color-border);" onclick="event.stopPropagation()">
       <!-- Search header -->
       <div class="flex items-center p-4 border-b" style="border-color: var(--color-border);">
         <div class="flex-1 relative">
           <input type="text" id="mobile-search-input" placeholder="搜索文档..." class="w-full pl-10 pr-10 py-2 rounded-lg border-none focus:ring-0" style="background-color: transparent; color: var(--color-text); outline: none;">
           <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5" style="color: var(--color-text-secondary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
           </svg>
         </div>
         <button id="mobile-search-close" class="ml-2 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700" style="color: var(--color-text);">
           <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
             <line x1="18" y1="6" x2="6" y2="18"></line>
             <line x1="6" y1="6" x2="18" y2="18"></line>
           </svg>
         </button>
       </div>
       <!-- Search results -->
       <div id="mobile-search-results" class="overflow-y-auto p-4 max-h-[70vh]">
         <div class="text-center py-10" style="color: var(--color-text-secondary);">
           <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
           </svg>
           <p class="mt-2 text-lg font-medium">开始搜索</p>
           <p class="mt-1 text-sm">输入关键词来搜索文档</p>
         </div>
       </div>
     </div>
   </div>

   <!-- Full screen navigation overlay -->
  <div id="nav-overlay" class="fixed inset-0 bg-white/10 backdrop-blur-md opacity-0 transition-all duration-300 ease-in-out" style="visibility: hidden; pointer-events: none; z-index: 50;">
    <button id="nav-close" class="absolute top-5 right-5 bg-none border-none text-3xl cursor-pointer text-white z-[60] pointer-events-auto">&times;</button>
    <nav class="flex flex-col justify-center items-center h-full gap-8">
      <a href="/" class="nav-item text-white no-underline text-4xl font-bold hover:text-gray-300 transition-all duration-300 transform hover:scale-110">首页</a>
      <a href="/docs" class="nav-item text-white no-underline text-4xl font-bold hover:text-gray-300 transition-all duration-300 transform hover:scale-110">文档</a>
      <a href="/posts/about" class="nav-item text-white no-underline text-4xl font-bold hover:text-gray-300 transition-all duration-300 transform hover:scale-110">关于本站</a>
      <!-- Add more links as needed -->
    </nav>
  </div>

  <!-- Right side: Floating options -->
  <div class="absolute right-0 flex gap-2.5 pointer-events-auto p-5" style="z-index: 30;">
    <!-- Mobile search button -->
    <button id="mobile-search-btn" class="mobile-search-btn nav-button rounded-xl cursor-pointer text-sm backdrop-blur-md hidden items-center justify-center w-12 h-12">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    
    <!-- Font size toggle button -->
    <div class="relative" id="font-size-selector">
      <button id="font-size-toggle" class="nav-button group relative rounded-xl cursor-pointer backdrop-blur-md flex items-center justify-center w-12 h-12">
        <span id="font-size-icon" class="text-lg font-bold transition-transform duration-300 group-hover:scale-110" style="color: var(--color-text);">字</span>
      </button>

      <!-- Font size dropdown menu -->
      <div id="font-size-dropdown" class="absolute right-0 mt-3 w-56 backdrop-blur-xl rounded-2xl shadow-2xl py-3 hidden" style="background-color: var(--color-card); border: 1px solid var(--color-border); z-index: 9999; max-width: 14rem; left: auto; right: 0.5rem; transform: translateX(0); overflow: visible;">
        <div class="px-2 py-2 text-xs font-semibold uppercase tracking-wide" style="color: var(--color-text-secondary);">字体大小</div>
        <div class="border-t border-gray-200 dark:border-gray-600 my-2"></div>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-font-size="normal" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <text x="4" y="18" font-size="14" fill="currentColor">A</text>
          </svg>
          正常
        </button>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-font-size="large" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <text x="2" y="18" font-size="16" fill="currentColor">A</text>
          </svg>
          大字体
        </button>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-font-size="xlarge" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <text x="1" y="19" font-size="18" fill="currentColor">A</text>
          </svg>
          超大字体 (长辈模式)
        </button>
      </div>
    </div>
    
    <!-- Theme toggle button -->
    <div class="relative" id="theme-selector">
      <button id="theme-toggle" class="nav-button group relative rounded-xl cursor-pointer backdrop-blur-md flex items-center justify-center w-12 h-12">
        <svg id="theme-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="transition-transform duration-300 group-hover:rotate-12">
          <!-- Sun icon -->
          <circle cx="12" cy="12" r="5" fill="currentColor" class="sun-circle"/>
          <g class="sun-rays">
            <line x1="12" y1="1" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="12" y1="21" x2="12" y2="23" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="1" y1="12" x2="3" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="21" y1="12" x2="23" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </g>
          <!-- Moon icon (hidden by default) -->
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" fill="currentColor" class="moon-path hidden"/>
        </svg>
      </button>

      <!-- Theme dropdown menu -->
      <div id="theme-dropdown" class="absolute right-0 mt-3 w-56 backdrop-blur-xl rounded-2xl shadow-2xl py-3 hidden" style="background-color: var(--color-card); border: 1px solid var(--color-border); z-index: 9999; max-width: 14rem; left: auto; right: 0.5rem; transform: translateX(0); overflow: visible;">
        <div class="px-2 py-2 text-xs font-semibold uppercase tracking-wide" style="color: var(--color-text-secondary);">主题设置</div>
        <div class="border-t border-gray-200 dark:border-gray-600 my-2"></div>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-theme="system" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
          跟随系统
        </button>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-theme="light" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-yellow-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"/>
          </svg>
          浅色模式
        </button>
        <button class="flex items-center w-full text-left px-2 py-3 text-sm transition-all duration-200 rounded-lg" style="color: var(--color-text);" data-theme="dark" onmouseover="this.style.backgroundColor='var(--color-hover)'" onmouseout="this.style.backgroundColor='transparent'">
          <svg class="w-4 h-4 mr-3 text-indigo-500" fill="currentColor" viewBox="0 0 24 24">
            <path fill-rule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z" clip-rule="evenodd"/>
          </svg>
          深色模式
        </button>
      </div>
    </div>
  </div>
</div>

<!-- 引入 pinyin-pro CDN -->
<script is:inline src="https://cdn.jsdelivr.net/npm/pinyin-pro@3.27.0/dist/index.min.js"></script>

<script is:inline define:vars={{ searchData }}>
  // 将搜索数据存储到全局对象，使搜索在所有页面都可用
  if (!window.docsData) {
    window.docsData = {
      articles: searchData,
      groups: []
    };
  }
  
  // 生成拼音搜索字符串（使用 pinyin-pro 库）
  window.generatePinyinString = function(text) {
    if (!text) return { fullPinyin: '', initials: '' };
    
    try {
      // 如果 pinyin-pro 库已加载
      if (window.pinyinPro && window.pinyinPro.pinyin) {
        // 获取全拼（不带音调，转小写）
        const fullPinyin = window.pinyinPro.pinyin(text, {
          toneType: 'none'
        }).replace(/\s+/g, '').toLowerCase();
        
        // 获取首字母（不带音调，转小写）
        const initials = window.pinyinPro.pinyin(text, {
          pattern: 'first',
          toneType: 'none'
        }).replace(/\s+/g, '').toLowerCase();
        
        return { fullPinyin, initials };
      }
    } catch (e) {
      console.warn('Pinyin conversion failed:', e);
    }
    
    // 如果库未加载或出错，返回原文本
    return { fullPinyin: text.toLowerCase(), initials: text.toLowerCase() };
  };
</script>

<style>
  /* Navigation buttons base style */
  .nav-button {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--color-text);
  }

  /* Dark mode styles for navigation buttons - using :global() for proper scoping */
  :global(html.dark) .nav-button {
    background-color: var(--color-card) !important;
    border: 1px solid var(--color-border) !important;
    color: var(--color-text) !important;
  }

  /* Search input base style */
  .search-input {
    background-color: rgba(255, 255, 255, 0.1) !important;
    border-color: rgba(255, 255, 255, 0.2) !important;
    color: var(--color-text) !important;
  }

  .search-input:focus {
    background-color: rgba(255, 255, 255, 0.2) !important;
    border-color: rgba(255, 255, 255, 0.4) !important;
  }

  /* Dark mode styles for search input */
  :global(html.dark) .search-input {
    background-color: var(--color-card) !important;
    border-color: var(--color-border) !important;
    color: var(--color-text) !important;
  }

  :global(html.dark) .search-input:focus {
    background-color: var(--color-hover) !important;
    border-color: var(--color-accent-secondary) !important;
  }

  /* Search icon color */
  .search-icon {
    color: var(--color-text);
  }

.nav-item {
  opacity: 0;
  transform: translateX(-100px);
  transition: all 0.5s ease-out;
}

.nav-item.visible {
  opacity: 1;
  transform: translateX(0);
}
  /* Theme icon states */
  :global(html.dark) .sun-rays {
    opacity: 0;
    transform: rotate(180deg);
  }

  :global(html.dark) .moon-path {
    opacity: 1;
  }

  :global(html.dark) .sun-circle {
    opacity: 0;
  }


  /* Enhanced dropdown styling */
  #theme-dropdown {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Theme option hover effects are now handled by inline styles */

  /* Search box responsive styles */
  @media screen and (max-width: 768px) {
    .desktop-search {
      width: 150px !important;
      font-size: 14px;
    }
    .desktop-search input {
      width: 100% !important;
    }
  }

  @media screen and (max-width: 640px) {
    .desktop-search {
      display: none;
    }
    .mobile-search-btn {
      display: inline-flex !important;
    }
  }

  /* Mobile search modal styles */
  .mobile-search-modal {
    backdrop-filter: blur(10px);
    background-color: rgba(0, 0, 0, 0.5);
    pointer-events: none;
  }

  .mobile-search-modal.show {
    display: flex !important;
    pointer-events: auto;
  }

  #mobile-search-input:focus {
    border-color: var(--color-accent-secondary) !important;
    box-shadow: 0 0 0 2px rgba(233, 30, 99, 0.1);
  }

  .search-result-item {
     padding: 12px 16px;
     border-radius: 8px;
     margin-bottom: 8px;
     cursor: pointer;
     transition: background-color 0.2s;
     border: 1px solid transparent;
   }

   .search-result-item:hover {
     background-color: var(--color-hover);
     border-color: var(--color-border);
   }

   .search-result-title {
     font-weight: 500;
     margin-bottom: 4px;
   }

   .search-result-desc {
     font-size: 14px;
     color: var(--color-text-secondary);
     display: -webkit-box;
     -webkit-line-clamp: 2;
     -webkit-box-orient: vertical;
     overflow: hidden;
   }

   /* Desktop search dropdown */
   .desktop-search-dropdown {
     position: absolute;
     top: calc(100% + 12px);
     left: 50%;
     transform: translateX(-50%);
     width: 500px;
     max-width: 90vw;
     max-height: 450px;
     background: var(--color-card);
     border: 1px solid var(--color-border);
     border-radius: 16px;
     box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
     backdrop-filter: blur(24px);
     -webkit-backdrop-filter: blur(24px);
     overflow: hidden;
     z-index: 9999;
     animation: slideDown 0.2s ease-out;
   }

   @keyframes slideDown {
     from {
       opacity: 0;
       transform: translateX(-50%) translateY(-10px);
     }
     to {
       opacity: 1;
       transform: translateX(-50%) translateY(0);
     }
   }

   @keyframes fadeIn {
     from {
       opacity: 0;
       transform: translateY(-5px);
     }
     to {
       opacity: 1;
       transform: translateY(0);
     }
   }

   .desktop-search-dropdown.hidden {
     display: none;
   }

   .search-results-content {
     max-height: 450px;
     overflow-y: auto;
     padding: 12px;
   }

   .search-results-content::-webkit-scrollbar {
     width: 8px;
   }

   .search-results-content::-webkit-scrollbar-track {
     background: transparent;
     margin: 8px 0;
   }

   .search-results-content::-webkit-scrollbar-thumb {
     background: var(--color-border);
     border-radius: 10px;
     border: 2px solid var(--color-card);
   }

   .search-results-content::-webkit-scrollbar-thumb:hover {
     background: var(--color-text-secondary);
   }

   /* 美化搜索结果项 */
   .desktop-search-dropdown .search-result-item {
     padding: 16px 18px;
     border-radius: 12px;
     margin-bottom: 14px;
     cursor: pointer;
     transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
     border: 1px solid transparent;
     background: transparent;
   }

   .desktop-search-dropdown .search-result-item:hover {
     background: rgba(128, 128, 128, 0.25) !important;
     border-color: rgba(128, 128, 128, 0.4) !important;
     transform: scale(1.05) !important;
     box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2) !important;
   }

   .desktop-search-dropdown .search-result-item:last-child {
     margin-bottom: 0;
   }

   .desktop-search-dropdown .search-result-title {
     font-weight: 600;
     margin-bottom: 6px;
     font-size: 15px;
     line-height: 1.4;
   }

   .desktop-search-dropdown .search-result-desc {
     font-size: 13px;
     line-height: 1.5;
     margin-top: 4px;
   }

   @media screen and (max-width: 640px) {
     .desktop-search-dropdown {
       display: none !important;
     }
   }

   @media screen and (max-width: 768px) {
     .desktop-search-dropdown {
       width: 400px;
     }
   }
</style>

<script is:inline>
   // Function to initialize navigation functionality
   function initNavigation() {
     const navToggle = document.getElementById('nav-toggle');
     const navOverlay = document.getElementById('nav-overlay');
     const navClose = document.getElementById('nav-close');
     // Remove existing event listeners by replacing elements to prevent duplicates
     if (navToggle) {
       const newNavToggle = navToggle.cloneNode(true);
       navToggle.parentNode.replaceChild(newNavToggle, navToggle);
     }
     if (navClose) {
       const newNavClose = navClose.cloneNode(true);
       navClose.parentNode.replaceChild(newNavClose, navClose);
     }

     // Re-get references to the new elements
     const updatedNavToggle = document.getElementById('nav-toggle');
     const updatedNavClose = document.getElementById('nav-close');

     // Change nav item color based on theme and page
     const isDarkMode = document.documentElement.classList.contains('dark');
     const isDocsPage = window.location.pathname === '/docs';

     if (isDarkMode) {
       // In dark mode, always use white text
       const navItems = navOverlay.querySelectorAll('.nav-item');
       navItems.forEach(item => {
         item.classList.remove('text-black');
         item.classList.add('text-white');
       });
     } else {
       // In light mode
       if (isDocsPage) {
         // Black text on docs page for better contrast
         const navItems = navOverlay.querySelectorAll('.nav-item');
         navItems.forEach(item => {
           item.classList.remove('text-white');
           item.classList.add('text-black');
         });
       } else {
         // White text on other pages
         const navItems = navOverlay.querySelectorAll('.nav-item');
         navItems.forEach(item => {
           item.classList.remove('text-black');
           item.classList.add('text-white');
         });
       }
     }
     // Keep consistent overlay background
     navOverlay.style.background = 'rgba(0, 0, 0, 0.5)';

     if (updatedNavToggle && navOverlay) {
       console.log('Elements found:', updatedNavToggle, navOverlay);

       const openMenu = () => {
         console.log('Opening menu');
         navOverlay.style.visibility = 'visible';
         navOverlay.style.pointerEvents = 'auto';
         navOverlay.style.opacity = '1';
         const navItems = navOverlay.querySelectorAll('.nav-item');
         navItems.forEach((item, index) => {
           setTimeout(() => {
             item.classList.add('visible');
           }, index * 100);
         });
       };

       const closeMenu = () => {
         console.log('Closing menu');
         navOverlay.style.opacity = '0';
         const navItems = navOverlay.querySelectorAll('.nav-item');
         navItems.forEach((item) => {
           item.classList.remove('visible');
         });
         // Handle visibility and pointer-events after transition
         setTimeout(() => {
           navOverlay.style.visibility = 'hidden';
           navOverlay.style.pointerEvents = 'none';
         }, 300);
       };

       updatedNavToggle.addEventListener('click', () => {
         console.log('Toggle clicked');
         openMenu();
       });

       if (updatedNavClose) {
         updatedNavClose.addEventListener('click', (e) => {
           console.log('Close button click event fired!'); // Added log
           e.preventDefault(); // Prevent default button action
           e.stopPropagation(); // Stop event from bubbling up to overlay
           closeMenu();
         });
       }

       // Handle clicks on overlay to close menu (only when clicking directly on overlay)
       navOverlay.removeEventListener('click', handleOverlayClick); // Remove any existing listener
       navOverlay.addEventListener('click', handleOverlayClick);

       // Handle clicks on navigation links
       const navLinks = navOverlay.querySelectorAll('.nav-item');
       navLinks.forEach(link => {
         link.removeEventListener('click', handleNavLinkClick); // Remove any existing listener
         link.addEventListener('click', handleNavLinkClick);
       });

       // Function to handle overlay clicks
       function handleOverlayClick(e) {
         if (e.target === navOverlay) {
           console.log('Overlay clicked');
           closeMenu();
         }
       }

       // Function to handle nav link clicks
       function handleNavLinkClick(e) {
         closeMenu();
       }
     } else {
       console.log('Elements not found:', updatedNavToggle, navOverlay, updatedNavClose);
     }
   }

   // Initialize search functionality
   function initSearch() {
     const searchInput = document.getElementById('search-input');
     const mobileSearchBtn = document.getElementById('mobile-search-btn');
     const mobileSearchModal = document.getElementById('mobile-search-modal');
     const mobileSearchInput = document.getElementById('mobile-search-input');
     const mobileSearchClose = document.getElementById('mobile-search-close');
     const mobileSearchResults = document.getElementById('mobile-search-results');

     // Store posts data for search
     let postsData = [];

     // Function to collect posts data
     function collectPostsData() {
       postsData = [];
       // Try to get data from window.docsData (set by docs.astro)
       if (window.docsData && window.docsData.articles) {
         postsData = window.docsData.articles;
       } else if (window.location.pathname === '/docs' || window.location.pathname.includes('/docs')) {
         // Fallback: collect from DOM
         const articles = document.querySelectorAll('.article-card');
         articles.forEach(article => {
           const titleEl = article.querySelector('h3');
           const descEl = article.querySelector('.card-description');
           const categoryEl = article.querySelector('.meta-category');
           const tagsEls = article.querySelectorAll('.tag');
           const link = article.getAttribute('href') || '';
           const title = titleEl?.textContent?.trim() || '';
           const description = descEl?.textContent?.trim() || '';
           const category = categoryEl?.textContent?.trim() || '';
           const tags = Array.from(tagsEls).map(tag => tag.textContent?.trim() || '');
           
           if (title) {
             postsData.push({
               title,
               description,
               category,
               tags,
               link,
               groupName: category // 使用 category 作为 groupName 的备选
             });
           }
         });
       }
     }

     // Collect posts data
     collectPostsData();

     // Enhanced search function with pinyin matching and case-insensitive English matching
     function searchArticles(query) {
       if (!query || !postsData || postsData.length === 0) {
         return [];
       }

       const searchQuery = query.trim();
       const searchQueryLower = searchQuery.toLowerCase();
       
       return postsData.filter(article => {
         // 标准匹配（大小写不敏感）
         const titleMatchStandard = article.title?.toLowerCase().includes(searchQueryLower);
         const descMatchStandard = article.description?.toLowerCase().includes(searchQueryLower);
         const categoryMatchStandard = article.category?.toLowerCase().includes(searchQueryLower);
         const groupMatchStandard = article.groupName?.toLowerCase().includes(searchQueryLower);
         const tagsMatchStandard = article.tags?.some(tag => tag.toLowerCase().includes(searchQueryLower));
         
         // 拼音匹配（使用 pinyin-pro 动态生成）
         let titleMatchPinyin = false;
         let descMatchPinyin = false;
         let categoryMatchPinyin = false;
         let groupMatchPinyin = false;
         let tagsMatchPinyin = false;
         
         if (window.generatePinyinString) {
           // 标题拼音匹配
           if (article.title) {
             const titlePinyin = window.generatePinyinString(article.title);
             titleMatchPinyin = titlePinyin.fullPinyin.includes(searchQueryLower) ||
                               titlePinyin.initials.includes(searchQueryLower);
           }
           
           // 描述拼音匹配
           if (article.description) {
             const descPinyin = window.generatePinyinString(article.description);
             descMatchPinyin = descPinyin.fullPinyin.includes(searchQueryLower) ||
                              descPinyin.initials.includes(searchQueryLower);
           }
           
           // 分类拼音匹配
           if (article.category) {
             const categoryPinyin = window.generatePinyinString(article.category);
             categoryMatchPinyin = categoryPinyin.fullPinyin.includes(searchQueryLower) ||
                                  categoryPinyin.initials.includes(searchQueryLower);
           }
           
           // 分组名称拼音匹配
           if (article.groupName) {
             const groupPinyin = window.generatePinyinString(article.groupName);
             groupMatchPinyin = groupPinyin.fullPinyin.includes(searchQueryLower) ||
                               groupPinyin.initials.includes(searchQueryLower);
           }
           
           // 标签拼音匹配
           if (article.tags && article.tags.length > 0) {
             tagsMatchPinyin = article.tags.some(tag => {
               const tagPinyin = window.generatePinyinString(tag);
               return tagPinyin.fullPinyin.includes(searchQueryLower) ||
                      tagPinyin.initials.includes(searchQueryLower);
             });
           }
         }

         return titleMatchStandard || descMatchStandard || categoryMatchStandard || groupMatchStandard || tagsMatchStandard ||
                titleMatchPinyin || descMatchPinyin || categoryMatchPinyin || groupMatchPinyin || tagsMatchPinyin;
       });
     }

     // Mobile search modal functionality
     if (mobileSearchBtn && mobileSearchModal && mobileSearchClose && mobileSearchInput && mobileSearchResults) {
       mobileSearchBtn.addEventListener('click', (e) => {
         e.stopPropagation(); // Prevent immediate closing if click bubbles up
         // Collect posts data when opening search modal
         collectPostsData();
         mobileSearchModal.classList.add('show');
         setTimeout(() => mobileSearchInput.focus(), 100);
       });

       mobileSearchClose.addEventListener('click', () => {
         mobileSearchModal.classList.remove('show');
         mobileSearchInput.value = '';
         mobileSearchResults.innerHTML = `
           <div class="text-center py-10" style="color: var(--color-text-secondary);">
             <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
             </svg>
             <p class="mt-2 text-lg font-medium">开始搜索</p>
             <p class="mt-1 text-sm">输入关键词来搜索文档</p>
           </div>
         `;
       });

       // Close modal when clicking outside the modal content
       document.addEventListener('click', (e) => {
         if (mobileSearchModal.classList.contains('show') && !mobileSearchModal.contains(e.target) && e.target !== mobileSearchBtn) {
           mobileSearchModal.classList.remove('show');
           mobileSearchInput.value = '';
           mobileSearchResults.innerHTML = `
             <div class="text-center py-10" style="color: var(--color-text-secondary);">
               <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
               </svg>
               <p class="mt-2 text-lg font-medium">开始搜索</p>
               <p class="mt-1 text-sm">输入关键词来搜索文档</p>
             </div>
           `;
         }
       });

       // Close modal on Escape key
       document.addEventListener('keydown', (e) => {
         if (e.key === 'Escape' && mobileSearchModal.classList.contains('show')) {
           mobileSearchModal.classList.remove('show');
           mobileSearchInput.value = '';
           mobileSearchResults.innerHTML = `
             <div class="text-center py-10" style="color: var(--color-text-secondary);">
               <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
               </svg>
               <p class="mt-2 text-lg font-medium">开始搜索</p>
               <p class="mt-1 text-sm">输入关键词来搜索文档</p>
             </div>
           `;
         }
       });

       // Mobile search input functionality
       mobileSearchInput.addEventListener('input', (e) => {
         const query = e.target.value.trim();
         mobileSearchResults.innerHTML = '';

         if (query && postsData.length > 0) {
           const filteredPosts = searchArticles(query);

           if (filteredPosts.length > 0) {
             filteredPosts.forEach((post, index) => {
               const resultItem = document.createElement('div');
               resultItem.className = 'search-result-item';
               resultItem.style.animation = `fadeIn 0.2s ease-out ${index * 0.05}s both`;
               resultItem.style.padding = '16px';
               resultItem.style.marginBottom = '12px';
               resultItem.style.borderRadius = '12px';
               
               // 获取分组颜色
               const groupColor = post.groupColor || '#999';
               
               // 显示标签（如果有）
               const tagsHtml = post.tags && post.tags.length > 0
                 ? `<div style="display: flex; gap: 6px; flex-wrap: wrap; margin-top: 10px;">
                      ${post.tags.map(tag => `<span style="font-size: 11px; padding: 3px 8px; background: ${groupColor}25; color: ${groupColor}; border-radius: 6px; font-weight: 500;">${tag}</span>`).join('')}
                    </div>`
                 : '';
               
               // 显示分组徽章
               const groupBadge = post.groupName
                 ? `<span style="display: inline-flex; align-items: center; gap: 4px; font-size: 11px; padding: 3px 10px; background: ${groupColor}20; color: ${groupColor}; border-radius: 6px; font-weight: 600; border: 1px solid ${groupColor}30; margin-bottom: 10px;">
                      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>
                      </svg>
                      ${post.groupName}
                    </span>`
                 : '';

               resultItem.innerHTML = `
                 <div style="display: flex; align-items: flex-start; gap: 14px;">
                   <div style="flex-shrink: 0; width: 40px; height: 40px; background: ${groupColor}15; border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-top: 4px;">
                     <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="${groupColor}" stroke-width="2">
                       <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                       <path d="M14 2v6h6M16 13H8M16 17H8M10 9H8"/>
                     </svg>
                   </div>
                   <div style="flex: 1; min-width: 0;">
                     ${groupBadge}
                     <div class="search-result-title" style="color: var(--color-text); margin-bottom: 8px; font-weight: 600; font-size: 15px;">${post.title}</div>
                     ${post.description ? `<div class="search-result-desc" style="margin-bottom: 10px;">${post.description}</div>` : ''}
                     ${tagsHtml}
                   </div>
                 </div>
               `;
               
               // Hover效果
               resultItem.addEventListener('mouseenter', function() {
                 this.style.background = `${groupColor}30`;
                 this.style.borderColor = `${groupColor}60`;
                 this.style.transform = 'scale(1.02)';
                 this.style.boxShadow = `0 6px 16px ${groupColor}40`;
               });
               
               resultItem.addEventListener('mouseleave', function() {
                 this.style.background = 'transparent';
                 this.style.borderColor = 'transparent';
                 this.style.transform = 'scale(1)';
                 this.style.boxShadow = 'none';
               });
               
               resultItem.addEventListener('click', () => {
                 // 关闭搜索模态框
                 mobileSearchModal.classList.remove('show');
                 mobileSearchInput.value = '';
                 // ClientRouter会自动处理SPA导航
                 window.location.href = post.link;
               });
               mobileSearchResults.appendChild(resultItem);
             });
           } else {
             mobileSearchResults.innerHTML = '<div style="text-align: center; color: var(--color-text-secondary); padding: 20px;">未找到匹配的文章</div>';
           }
         } else if (query === '') {
           mobileSearchResults.innerHTML = '<div style="text-align: center; color: var(--color-text-secondary); padding: 20px;">输入关键词开始搜索</div>';
         } else if (query && postsData.length === 0) {
           mobileSearchResults.innerHTML = '<div style="text-align: center; color: var(--color-text-secondary); padding: 20px;">搜索功能仅在文档页面可用，请前往文档页面进行搜索</div>';
         }
       });
     }

     // Desktop search dropdown functionality
     const desktopSearchResults = document.getElementById('desktop-search-results');
     
     if (searchInput) {
       // 桌面端搜索下拉预览功能（适用于所有页面，不修改页面内容）
       searchInput.addEventListener('input', (e) => {
         const query = e.target.value.trim();
         
         if (!desktopSearchResults) return;

         if (!query || !postsData || postsData.length === 0) {
           desktopSearchResults.classList.add('hidden');
           return;
         }

         // 使用增强的搜索函数
         const matchedArticles = searchArticles(query);

         if (matchedArticles.length > 0) {
           const resultsHTML = matchedArticles.slice(0, 5).map((article, index) => {
             // 从 window.docsData 中获取分组颜色
             const groupColor = article.groupColor || '#999';
             
             const tagsHtml = article.tags && article.tags.length > 0
               ? `<div style="display: flex; gap: 6px; flex-wrap: wrap; margin-top: 8px;">
                    ${article.tags.map(tag => `<span style="font-size: 11px; padding: 3px 8px; background: ${groupColor}25; color: ${groupColor}; border-radius: 6px; font-weight: 500;">${tag}</span>`).join('')}
                  </div>`
               : '';
             
             const groupBadge = article.groupName
               ? `<span style="display: inline-flex; align-items: center; gap: 4px; font-size: 11px; padding: 3px 10px; background: ${groupColor}20; color: ${groupColor}; border-radius: 6px; font-weight: 600; border: 1px solid ${groupColor}30;">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/>
                    </svg>
                    ${article.groupName}
                  </span>`
               : '';

             return `
               <div class="search-result-item" data-link="${article.link}" data-color="${groupColor}" style="animation: fadeIn 0.2s ease-out ${index * 0.05}s both;">
                 <div style="display: flex; align-items: flex-start; gap: 16px; padding: 4px;">
                   <div style="flex-shrink: 0; width: 40px; height: 40px; background: ${groupColor}15; border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-top: 4px;">
                     <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="${groupColor}" stroke-width="2">
                       <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                       <path d="M14 2v6h6M16 13H8M16 17H8M10 9H8"/>
                     </svg>
                   </div>
                   <div style="flex: 1; min-width: 0;">
                     <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                       ${groupBadge}
                     </div>
                     <div class="search-result-title" style="color: var(--color-text); margin-bottom: 8px;">${article.title}</div>
                     ${article.description ? `<div class="search-result-desc" style="margin-bottom: 10px;">${article.description}</div>` : ''}
                     ${tagsHtml}
                   </div>
                 </div>
               </div>
             `;
           }).join('');

           desktopSearchResults.querySelector('.search-results-content').innerHTML = resultsHTML;
           desktopSearchResults.classList.remove('hidden');

           // 为每个搜索结果添加点击和hover事件
           desktopSearchResults.querySelectorAll('.search-result-item').forEach(item => {
             // 点击事件 - ClientRouter会自动处理SPA导航
             item.addEventListener('click', (e) => {
               e.preventDefault();
               const link = item.getAttribute('data-link');
               if (link) {
                 // 关闭下拉框
                 desktopSearchResults.classList.add('hidden');
                 // 清空搜索框
                 searchInput.value = '';
                 // ClientRouter会自动拦截并转换为SPA导航
                 window.location.href = link;
               }
             });
             
             // Hover效果（使用分组颜色，更明显）
             const groupColor = item.getAttribute('data-color') || '#999';
             item.addEventListener('mouseenter', function() {
               this.style.background = `${groupColor}30`;
               this.style.borderColor = `${groupColor}60`;
               this.style.transform = 'scale(1.05)';
               this.style.boxShadow = `0 8px 20px ${groupColor}40`;
               this.style.borderRadius = '10px';
             });
             
             item.addEventListener('mouseleave', function() {
               this.style.background = 'transparent';
               this.style.borderColor = 'transparent';
               this.style.transform = 'scale(1)';
               this.style.boxShadow = 'none';
               this.style.borderRadius = '10px';
             });
           });
         } else {
           desktopSearchResults.querySelector('.search-results-content').innerHTML =
             '<div style="text-align: center; padding: 20px; color: var(--color-text-secondary);">未找到匹配的文章</div>';
           desktopSearchResults.classList.remove('hidden');
         }
       });

       // 按 Enter 键跳转到第一个结果或文档页面（使用SPA）
       searchInput.addEventListener('keydown', (e) => {
         if (e.key === 'Enter') {
           e.preventDefault();
           const query = e.target.value.trim();
           
           if (desktopSearchResults) {
             desktopSearchResults.classList.add('hidden');
           }
           
           if (query && postsData && postsData.length > 0) {
             const matchedArticles = searchArticles(query);
             if (matchedArticles.length > 0) {
               // 清空搜索框
               searchInput.value = '';
               // ClientRouter会自动处理SPA导航
               window.location.href = matchedArticles[0].link;
             } else {
               // 没有匹配结果，跳转到文档页面
               searchInput.value = '';
               window.location.href = '/docs';
             }
           } else if (query) {
             // 有查询但没有数据，跳转到文档页面
             searchInput.value = '';
             window.location.href = '/docs';
           } else {
             // 没有查询，跳转到文档页面
             window.location.href = '/docs';
           }
         } else if (e.key === 'Escape') {
           // 按 ESC 关闭下拉框
           if (desktopSearchResults) {
             desktopSearchResults.classList.add('hidden');
           }
           searchInput.blur();
         }
       });

       // 点击外部关闭下拉框
       document.addEventListener('click', (e) => {
         if (desktopSearchResults &&
             !searchInput.contains(e.target) &&
             !desktopSearchResults.contains(e.target)) {
           desktopSearchResults.classList.add('hidden');
         }
       });

       // 移除URL参数处理，不再自动触发搜索
     }
   }

   // 统一初始化 - 只在DOM加载完成后执行一次
   if (document.readyState === 'loading') {
     document.addEventListener('DOMContentLoaded', initAll);
   } else {
     initAll();
   }
   
   function initAll() {
     initNavigation();
     initSearch();
     initThemeSelector();
     initFontSizeSelector();
     
     // 初始化主题
     const savedTheme = localStorage.getItem('theme');
     if (savedTheme) {
       setTheme(savedTheme);
     } else {
       setTheme('system');
     }
     
     // 初始化字体大小
     const savedFontSize = localStorage.getItem('fontSize');
     if (savedFontSize) {
       setFontSize(savedFontSize);
     } else {
       setFontSize('normal');
     }
   }

   // Next.js 風格的預載入功能 - 重新啟用以改善導航體驗
   function initPrefetching() {
     // 為頁面導航添加預載入功能
     const links = document.querySelectorAll('a[href^="/"]');
     links.forEach(link => {
       link.addEventListener('mouseenter', (e) => {
         const href = e.target.getAttribute('href');
         if (href && !href.startsWith('http')) {
           prefetchPage(href);
         }
       });
     });
   }

   function prefetchPage(href) {
     // 創建預載入鏈接
     const link = document.createElement('link');
     link.rel = 'prefetch';
     link.href = href;
     link.onload = () => console.log(`Prefetched: ${href}`);
     link.onerror = () => console.warn(`Failed to prefetch: ${href}`);
     document.head.appendChild(link);
   }

   // Reinitialize after Astro navigation (SPA transitions)
   document.addEventListener('astro:after-swap', () => {
     initNavigation();
     initSearch();
     setTimeout(initPrefetching, 300); // 延遲初始化預載入，確保DOM完全加載
     // Re-apply theme after page transition
     const savedTheme = localStorage.getItem('theme');
     if (savedTheme) {
       setTheme(savedTheme);
     } else {
       setTheme('system');
     }
     // Re-apply font size after page transition
     const savedFontSize = localStorage.getItem('fontSize');
     if (savedFontSize) {
       setFontSize(savedFontSize);
     } else {
       setFontSize('normal');
     }
     // Re-initialize theme and font size functionality
     initThemeSelector();
     initFontSizeSelector();
   });

   // Initialize font size selector (extracted for reuse)
   function initFontSizeSelector() {
     const fontSizeToggle = document.getElementById('font-size-toggle');
     const fontSizeDropdown = document.getElementById('font-size-dropdown');

     if (fontSizeToggle && fontSizeDropdown) {
       // Remove existing event listeners by cloning
       const newFontSizeToggle = fontSizeToggle.cloneNode(true);
       fontSizeToggle.parentNode.replaceChild(newFontSizeToggle, fontSizeToggle);

       const newFontSizeDropdown = fontSizeDropdown.cloneNode(true);
       fontSizeDropdown.parentNode.replaceChild(newFontSizeDropdown, fontSizeDropdown);
       // Ensure z-index is set after cloning
       newFontSizeDropdown.style.zIndex = '9999';

       // Re-get references
       const updatedFontSizeToggle = document.getElementById('font-size-toggle');
       const updatedFontSizeDropdown = document.getElementById('font-size-dropdown');

       // Re-add event listeners
       updatedFontSizeToggle.addEventListener('click', function(e) {
         e.stopPropagation();
         updatedFontSizeDropdown.classList.toggle('hidden');
       });

       // Close dropdown when clicking elsewhere
       document.addEventListener('click', function(e) {
         if (!updatedFontSizeToggle.contains(e.target) && !updatedFontSizeDropdown.contains(e.target)) {
           updatedFontSizeDropdown.classList.add('hidden');
         }
       });

       // Font size selection
       const fontSizeButtons = document.querySelectorAll('[data-font-size]');
       fontSizeButtons.forEach(button => {
         // Remove existing listeners by cloning
         const newButton = button.cloneNode(true);
         button.parentNode.replaceChild(newButton, button);
       });

       // Re-add listeners to new buttons
       const newFontSizeButtons = document.querySelectorAll('[data-font-size]');
       newFontSizeButtons.forEach(button => {
         button.addEventListener('click', function() {
           const fontSize = this.getAttribute('data-font-size');
           setFontSize(fontSize);
           updatedFontSizeDropdown.classList.add('hidden');
         });
       });
     }
   }

   // Initialize theme selector (extracted for reuse)
   function initThemeSelector() {
     const themeToggle = document.getElementById('theme-toggle');
     const themeDropdown = document.getElementById('theme-dropdown');

     if (themeToggle && themeDropdown) {
       // Remove existing event listeners by cloning
       const newThemeToggle = themeToggle.cloneNode(true);
       themeToggle.parentNode.replaceChild(newThemeToggle, themeToggle);

       const newThemeDropdown = themeDropdown.cloneNode(true);
       themeDropdown.parentNode.replaceChild(newThemeDropdown, themeDropdown);
       // Ensure z-index is set after cloning
       newThemeDropdown.style.zIndex = '9999';

       // Re-get references
       const updatedThemeToggle = document.getElementById('theme-toggle');
       const updatedThemeDropdown = document.getElementById('theme-dropdown');

       // Re-add event listeners
       updatedThemeToggle.addEventListener('click', function(e) {
         e.stopPropagation();
         updatedThemeDropdown.classList.toggle('hidden');
       });

       // Close dropdown when clicking elsewhere
       document.addEventListener('click', function(e) {
         if (!updatedThemeToggle.contains(e.target) && !updatedThemeDropdown.contains(e.target)) {
           updatedThemeDropdown.classList.add('hidden');
         }
       });

       // Theme selection
       const themeButtons = document.querySelectorAll('[data-theme]');
       themeButtons.forEach(button => {
         // Remove existing listeners by cloning
         const newButton = button.cloneNode(true);
         button.parentNode.replaceChild(newButton, button);
       });

       // Re-add listeners to new buttons
       const newThemeButtons = document.querySelectorAll('[data-theme]');
       newThemeButtons.forEach(button => {
         button.addEventListener('click', function() {
           const theme = this.getAttribute('data-theme');
           setTheme(theme);
           updatedThemeDropdown.classList.add('hidden');
         });
       });
     }
   }
   
   // Global theme functions
   function setTheme(theme) {
     switch(theme) {
       case 'light':
         document.documentElement.className = 'light';
         document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' light';
         localStorage.setItem('theme', 'light');
         updateThemeIcon('light');
         // Re-apply navigation colors after theme change
         setTimeout(() => initNavigation(), 10);
         break;
       case 'dark':
         document.documentElement.className = 'dark';
         document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' dark';
         localStorage.setItem('theme', 'dark');
         updateThemeIcon('dark');
         // Re-apply navigation colors after theme change
         setTimeout(() => initNavigation(), 10);
         break;
       case 'system':
       default:
         if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
           document.documentElement.className = 'dark';
           document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' dark';
           localStorage.setItem('theme', 'system');
           updateThemeIcon('dark');
           // Re-apply navigation colors after theme change
           setTimeout(() => initNavigation(), 10);
         } else {
           document.documentElement.className = 'light';
           document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' light';
           localStorage.setItem('theme', 'system');
           updateThemeIcon('light');
           // Re-apply navigation colors after theme change
           setTimeout(() => initNavigation(), 10);
         }
         break;
     }
   }

   function updateThemeIcon(theme) {
     const sunRays = document.querySelector('.sun-rays');
     const moonPath = document.querySelector('.moon-path');
     const sunCircle = document.querySelector('.sun-circle');

     if (sunRays && moonPath && sunCircle) {
       if (theme === 'dark') {
         sunRays.style.opacity = '0';
         sunRays.style.transform = 'rotate(180deg)';
         moonPath.classList.remove('hidden');
         sunCircle.style.opacity = '0';
         setTimeout(() => {
           moonPath.style.opacity = '1';
         }, 150);
       } else {
         moonPath.style.opacity = '0';
         sunRays.style.opacity = '1';
         sunRays.style.transform = 'rotate(0deg)';
         sunCircle.style.opacity = '1';
         setTimeout(() => {
           moonPath.classList.add('hidden');
         }, 150);
       }
     }
   }

   // Global font size functions
   function setFontSize(size) {
     // Remove existing font size classes
     document.documentElement.classList.remove('font-normal', 'font-large', 'font-xlarge');
     
     // Add new font size class
     switch(size) {
       case 'normal':
         document.documentElement.classList.add('font-normal');
         localStorage.setItem('fontSize', 'normal');
         break;
       case 'large':
         document.documentElement.classList.add('font-large');
         localStorage.setItem('fontSize', 'large');
         break;
       case 'xlarge':
         document.documentElement.classList.add('font-xlarge');
         localStorage.setItem('fontSize', 'xlarge');
         break;
       default:
         document.documentElement.classList.add('font-normal');
         localStorage.setItem('fontSize', 'normal');
         break;
     }
   }

   // Listen for system theme changes
   if (window.matchMedia) {
     window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
       if (localStorage.getItem('theme') === 'system') {
         if (e.matches) {
           document.documentElement.className = 'dark';
           document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' dark';
           updateThemeIcon('dark');
         } else {
           document.documentElement.className = 'light';
           document.body.className = document.body.className.replace(/\b(dark|light)\b/g, '') + ' light';
           updateThemeIcon('light');
         }
       }
     });
   }
</script>