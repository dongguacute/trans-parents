---
interface Props {
  title: string;
  open?: boolean;
}

const { title, open = false } = Astro.props;
---

<div class="expandable-content">
  <button class="expandable-toggle" aria-expanded={open}>
    <span class="expandable-title">{title}</span>
    <svg class="expandable-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M7 10L12 15L17 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
  <div class="expandable-body" style={`display: ${open ? 'block' : 'none'};`}>
    <slot />
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggles = document.querySelectorAll('.expandable-toggle');

    toggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const content = toggle.parentElement;
        const body = content?.querySelector('.expandable-body') as HTMLElement;
        const icon = toggle.querySelector('.expandable-icon') as HTMLElement;
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';

        if (body && icon) {
          if (isExpanded) {
            body.style.display = 'none';
            toggle.setAttribute('aria-expanded', 'false');
            icon.style.transform = 'rotate(0deg)';
          } else {
            body.style.display = 'block';
            toggle.setAttribute('aria-expanded', 'true');
            icon.style.transform = 'rotate(180deg)';
          }
        }
      });
    });
  });
</script>

<style>
  .expandable-content {
    border: 1px solid var(--color-border);
    border-radius: 8px;
    margin: 1rem 0;
    overflow: hidden;
  }

  .expandable-toggle {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.25rem;
    background: var(--color-background-light, #f8f9fa);
    border: none;
    cursor: pointer;
    text-align: left;
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-text);
    transition: background-color 0.2s ease;
  }

  .expandable-toggle:hover {
    background: var(--color-background-hover, #e9ecef);
  }

  .expandable-toggle:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .expandable-title {
    flex: 1;
  }

  .expandable-icon {
    transition: transform 0.2s ease;
    color: var(--color-text-secondary);
  }

  .expandable-body {
    padding: 1rem 1.25rem;
    background: var(--color-card);
    border-top: 1px solid var(--color-border);
    color: var(--color-text-secondary);
    line-height: 1.6;
  }

  .expandable-body :global(p) {
    margin: 0 0 1rem 0;
  }

  .expandable-body :global(p:last-child) {
    margin-bottom: 0;
  }

  .expandable-body :global(ul),
  .expandable-body :global(ol) {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .expandable-body :global(li) {
    margin-bottom: 0.5rem;
  }

  .expandable-body :global(code) {
    background: var(--color-code-inline-bg);
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-family: 'Fira Code', 'Cascadia Code', monospace;
    font-size: 0.9em;
    color: var(--color-code-inline-text);
  }
</style>