---
import '../styles/global.css';
import Footer from '../components/Footer.astro';
import PerformanceMonitor from '../components/PerformanceMonitor.astro';
import LoadingProgress from '../components/LoadingProgress.astro';
import { ClientRouter } from "astro:transitions";
---

<!doctype html>
<html lang="en" class="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" href="/favicon-32.png" />

		<!-- PWA Meta Tags -->
		<meta name="description" content="Trans Parents - 跨性別家長支持平台" />
		<meta name="theme-color" content="#3b82f6" />
		<link rel="manifest" href="/manifest.json" />
		
		<!-- Apple Touch Icon -->
		<link rel="apple-touch-icon" href="/favicon-32.png" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="apple-mobile-web-app-title" content="TransParents" />
		
		<!-- Microsoft Tiles -->
		<meta name="msapplication-TileColor" content="#3b82f6" />
		<meta name="msapplication-TileImage" content="/favicon-32.png" />

		<!-- 預載入關鍵資源 -->
		<link rel="preload" href="/fonts/Roboto-Black.woff2" as="font" type="font/woff2" crossorigin>
		<!-- DNS 預取以加快外部資源載入 -->
		<link rel="dns-prefetch" href="https://fonts.googleapis.com">
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title || 'Trans Parents'}</title>
	</head>
	<body>
	<LoadingProgress />
	<slot />
		
		<Footer />
		<PerformanceMonitor />
		<ClientRouter />
		<script is:inline>
			// 優化的主題和字體大小初始化 - 更快速
			(function() {
				// 初始化主题
				const savedTheme = localStorage.getItem('theme');
				if (savedTheme) {
					document.documentElement.className = savedTheme;
				} else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
					document.documentElement.className = 'dark';
				}

				// 初始化字体大小
				const savedFontSize = localStorage.getItem('fontSize');
				if (savedFontSize) {
					document.documentElement.classList.add('font-' + savedFontSize);
				} else {
					document.documentElement.classList.add('font-normal');
				}
			})();

			// Service Worker 注册和缓存管理
			if ('serviceWorker' in navigator) {
				window.addEventListener('load', () => {
					navigator.serviceWorker.register('/sw.js')
						.then((registration) => {
							console.log('Service Worker registered successfully:', registration.scope);

							// 检查是否有新的 Service Worker 等待激活
							registration.addEventListener('updatefound', () => {
								const newWorker = registration.installing;
								if (newWorker) {
									newWorker.addEventListener('statechange', () => {
										if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
											// 有新的版本可用
											console.log('New Service Worker available, refreshing page...');
											window.location.reload();
										}
									});
								}
							});

							// 监听 Service Worker 消息
							navigator.serviceWorker.addEventListener('message', (event) => {
								if (event.data && event.data.type === 'CACHE_STATUS') {
									console.log('Cache status:', event.data);
								}
							});

							// 页面加载完成后预缓存当前页面
							setTimeout(() => {
								if ('caches' in window) {
									caches.open('articles-cache-v2').then(cache => {
										const currentUrl = window.location.pathname;
										if (currentUrl.startsWith('/posts/')) {
											cache.match(currentUrl).then(cached => {
												if (!cached) {
													console.log('Pre-caching current article:', currentUrl);
													cache.add(currentUrl);
												}
											});
										}
									});
								}
							}, 2000);
						})
						.catch((error) => {
							console.error('Service Worker registration failed:', error);
						});
				});

				// 页面卸载前保存缓存状态
				window.addEventListener('beforeunload', () => {
					if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
						navigator.serviceWorker.controller.postMessage({ type: 'GET_CACHE_STATUS' });
					}
				});

				// 页面刷新时清理文章缓存（保留静态资源缓存）
				window.addEventListener('beforeunload', () => {
					if ('caches' in window) {
						caches.open('articles-cache-v2').then(cache => {
							return cache.keys().then(requests => {
								return Promise.all(
									requests.map(request => cache.delete(request))
								);
							});
						}).then(() => {
							console.log('Article cache cleared on page refresh');
						}).catch(err => {
							console.error('Failed to clear article cache:', err);
						});
					}
				});
			}
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		display: flex;
	flex-direction: column;
	}
</style>
