---
import '../styles/global.css';
import Footer from '../components/Footer.astro';
import { ClientRouter } from "astro:transitions";
---

<!doctype html>
<html lang="en" class="light">
	<head>
		<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" href="/favicon-32.png" />

		<!-- 預載入關鍵資源 -->
		<link rel="preload" href="/assets/hero.jpg" as="image">
		<link rel="preload" href="/fonts/Roboto-Black.woff2" as="font" type="font/woff2" crossorigin>
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title || 'Trans Parents'}</title>
	</head>
	<body>
	<slot />
		<ClientRouter />
		<Footer />
		<style>
			/* 高級 ViewTransitions 優化 */
			::view-transition-old(root),
			::view-transition-new(root) {
				animation-duration: 0s;
				animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
			}

			/* 減少不必要的過渡 */
			::view-transition-image-pair(img) {
				isolation: auto;
			}

			/* 優化文字渲染 */
			::view-transition-old(root),
			::view-transition-new(root) {
				text-rendering: optimizeSpeed;
			}
		</style>
		<script>
			// 初始化主題，確保 CSS 變量正確應用
			(function() {
				// 檢查用戶首選主題
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				const savedTheme = localStorage.getItem('theme');

				// 應用主題
				const theme = savedTheme || (prefersDark ? 'dark' : 'light');
				document.documentElement.className = theme;

				// 確保 body 也有相應類別
				document.body.classList.add(theme);
			})();

			// 性能監控和優化
			let transitionStart = 0;

			// 監控 ViewTransitions 性能
			document.addEventListener('astro:before-swap', () => {
				transitionStart = performance.now();
			});

			document.addEventListener('astro:after-swap', () => {
				const transitionTime = performance.now() - transitionStart;
				console.log(`ViewTransition 完成時間: ${transitionTime.toFixed(2)}ms`);

				// 如果過渡太慢，記錄下來
				if (transitionTime > 100) {
					console.warn('ViewTransition 較慢，可能需要優化');
				}
			});

			// 監控長任務
			const observer = new PerformanceObserver((list) => {
				for (const entry of list.getEntries()) {
					if (entry.duration > 50) {
						console.warn(`長任務檢測: ${entry.duration.toFixed(2)}ms`, entry);
					}
				}
			});

			try {
				observer.observe({ entryTypes: ['longtask'] });
			} catch (e) {
				// 瀏覽器不支持，靜默失敗
			}
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
	}
</style>
